apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: {{ .Values.serviceName }}
  replicas: {{ .Values.replicas }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      subdomain: {{ .Values.serviceName }}
      hostname: $(POD_NAME)
      dnsPolicy: ClusterFirst
      containers:
        - name: kafka
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              mkdir -p /bitnami/kafka/config/certs
              mkdir -p /bitnami/kafka/data
              
              export KAFKA_KRAFT_CLUSTER_ID="{{ .Values.clusterId }}"
              export KAFKA_CFG_CLUSTER_ID="$KAFKA_KRAFT_CLUSTER_ID"
              export NODE_ID=${POD_NAME##*-}
              export KAFKA_CFG_NODE_ID=$NODE_ID

              exec /opt/bitnami/scripts/kafka/entrypoint.sh /opt/bitnami/scripts/kafka/run.sh
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: "{{ .Values.clusterId }}"
            - name: KAFKA_CFG_PROCESS_ROLES
              value: "controller,broker"
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: {{ range $i := until (int .Values.replicas) }}{{ if $i }},{{ end }}{{ $i }}@kafka-{{ $i }}.kafka.{{ $.Release.Namespace }}.svc.cluster.local:{{ $.Values.listeners.controller }}{{ end }}
            - name: KAFKA_CFG_LISTENERS
              value: "CONTROLLER://:{{ .Values.listeners.controller }},CLIENT://:{{ .Values.listeners.client }},BROKER://:{{ .Values.listeners.broker }}"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "CLIENT://$(POD_NAME).{{ .Values.serviceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.listeners.client }},BROKER://$(POD_NAME).{{ .Values.serviceName }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.listeners.broker }}"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CONTROLLER:PLAINTEXT,CLIENT:PLAINTEXT,BROKER:SSL"
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: "BROKER"
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_CFG_SSL_CLIENT_AUTH
              value: required
            - name: KAFKA_CFG_SSL_KEYSTORE_LOCATION
              value: /bitnami/kafka/config/certs/kafka.keystore.jks
            - name: KAFKA_CFG_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ssl.secretName }}
                  key: {{ .Values.ssl.keystorePasswordKey }}
            - name: KAFKA_CFG_SSL_TRUSTSTORE_LOCATION
              value: /bitnami/kafka/config/certs/kafka.truststore.jks
            - name: KAFKA_CFG_SSL_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.ssl.secretName }}
                  key: {{ .Values.ssl.truststorePasswordKey }}
          ports:
            - containerPort: {{ .Values.listeners.client }}
              name: client
            - containerPort: {{ .Values.listeners.broker }}
              name: broker
            - containerPort: {{ .Values.listeners.controller }}
              name: controller
          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami/kafka/data
            - name: kafka-certs
              mountPath: /bitnami/kafka/config/certs
              readOnly: true
      volumes:
        - name: kafka-certs
          secret:
            secretName: {{ .Values.ssl.secretName }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        storageClassName: {{ .Values.persistence.storageClass }}
  {{- end }}